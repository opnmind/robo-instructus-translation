// Pseudo markup format see ./README.md

#!unlock type{primer} id{loops}
# Loops

`loop` wird benutzt um Befehle zu wiederholen. Die Befehle werden innerhalb des Gültigkeitsbereiches unendlich oft wiederholt. Ein `loop` Gültigkeitsbereich wird festgelegt durch die Einrückung nach der `loop` Zeile.

```max_run=11
robo_forward()  # einmalig aufgerufen

loop
    robo_forward()
    robo_left()

robo_left()  # niemals aufgerufen
```


#!unlock type{primer} id{comments}
# Comments

Text nach dem '`#`' Symbol wird nicht als Code anerkannt, sondern als Kommentar zur Beschreibung von Codestellen.

```no_run
robo_left()  # Ich denke, ich fange an, dieses Kommando zu verstehen.
```


#!unlock type{primer} id{conditionals}
# Conditionals

`if` kann verwendet werden zur Ausführung von Befehlen, oder auch nicht, basierend auf einer Bedingung.

```
if robo_scan() is 1
    # eine Kachel ist in Scanrichtung
    robo_forward()

if robo_scan() is -1
    # keine Kachel ist in Scanrichtung
    robo_left()
```


#!unlock type{primer} id{variables}
# Variables

Du kannst eine Nummer in einer Variablen `var` speichern und sie später verwenden.

```
# Speichere ein Ergebnis eines Funktionsaufrufes in einer Variablen 'scan'.
var scan = robo_scan()

# Verwende gespeicherte Variablen z. B. in  Bedingungen von Kontrollstrukturen.
if scan is 1
    robo_forward()
if scan is -1
    robo_left()
```
Dies kann verwendet werden um mehrfach langsame Funktionsaufrufe zu vermeiden und dennoch das Ergebnis auf verschiedene Werte zu prüfen. Es erlaubt ebenso ein gespeicherte Ergebnis erst später zu verwenden.


#!unlock type{primer} id{conditionals-2}
# Conditions II

'`if expr`' überprüft einfach ob `expr` nicht Null ist. `0` wird interpretiert als "false" während `1` oder jeder andere positive Nicht-Null-Wert "true" ist. Wenn `expr` interpretiert wird als "true" dann wird der zugehörige eingerückte Befehl ausgeführt,

```
if 0
    robo_left()  # wird nicht aufgerufen

if 1
    robo_forward()  # wird aufgerufen
```


#!unlock type{primer} id{is}
Das Schlüsselwort `is` vergleicht zwei Werte und wird zu `1` (true) wenn die Werte identisch sind oder  zu `0` (false) wenn nicht. Es kann mit `if` verwendet werden.

`not` kann benutzt werden um eine `0` in eine `1` zu konvertieren, oder auch sämtliche positive Nicht-Null-Werte in eine `0`.

`not x is y ` kann auch als ` x is not y ` ausgedrückt werden und ergibt `1` (true) wenn die Werte sich unterscheiden.

```
var scan = robo_scan()

if scan is 1
    robo_forward()

if scan is not 1
    robo_left()
```


#!unlock type{primer} id{comparison}
# Comparison

Zusätzlich zu `is`, können Werte verglichen werden mit `>`, `>=`, `<`, `<=` Operatoren.

`    a > b  # a ist größer als b`
`    a >= b  # a ist größer oder gleich b`
`    a < b  # a ist kleiner als b`
`    a <= b  # a ist kleiner oder gleich b`

```
var scan = robo_scan()
if scan >= 1
    robo_forward()
if scan < 0
    robo_left()
```


#!unlock type{primer} id{conditionals-3}
# Conditions III

Nach einem `if` kann ein `else` benutzt werden um alle übrigen Fälle abzufangen.

Ein `else` Block wird aufgerufen wenn die `if` Bedingung zuvor nicht zutreffend ist.

```
var scan = robo_scan()
if scan is 1
    robo_forward()
else
    robo_left()
```


#!unlock type{primer} id{else-if}

Mehrfache `else if` Bedingungen können aneinander gereiht werden um viele verschiedene Prüfungen durchzuführen.

Dies stellt sicher das nur ein eingerückter Block ausgeführt wird.

```
var example = 14

if example is 1
    robo_left()
    robo_forward()
else if example <= 3
    robo_forward()
else if example > 12
    robo_forward()
    robo_forward()
else
    robo_left()
```
Der `else` Block am Ende wird nur ausgeführt wenn alle `if` und `else if` Prüfungen fehlschlugen. 


#!unlock type{primer} id{scope}
# Scope

Eingerückter Code, wie z. B. nach `loop` oder `if` Zeilen, stellt den "Scope" dar. Eine `var` kann nur innerhalb eines "Scope" benutzt werden wenn sie in ihm definiert wurde.
```no_run
if scan is 1
    var foo = 123
    if foo is 123  # funktioniert
        robo_left()

if foo is 123  # schlägt fehl! Nicht verfügbar außerhalb des Scopes.
    robo_left()
```
Um eine Variable `var` erreichbar zu machen, muss sie außerhalb des Scops definiert werden. Z. B. Top-Level Variablen sind von überall aus zugreifbar und werden nicht gelöscht.
```no_run
var foo
if scan is 1
    foo = 123
    if foo is 123  # funktioniert
        robo_left()

if foo is 123  # funktioniert
    robo_left()
```
Variablen werden gelöscht wenn der Scope beendet wird, wie die Benutzung von `var` in einem `loop`. Bei jeder Iteration wird die Variable neu zugewiesen. 


#!unlock type{primer} id{loops-2}
# Loops II

Das Schlüsselwort `continue` wird benutzt um den nächsten Schleifendurchlauf zu beginnen. Während das Schlüsselwort `break` dazu benutzt werden kann eine Schleife vorzeitig zu beenden.

```
var count = 0
loop
    if count is not 2
        robo_forward()
        count += 1
        continue
    break

robo_left()
robo_left()
```


#!unlock type{primer} id{loops-3}
# Loops III

Beachte dieser `loop` dreht 5 mal nach links.
```
# dreht 5 mal nach links
var loop_count = 1
loop
    if loop_count > 5
        break
    robo_left()
    loop_count = loop_count + 1
```
Während jede Art von Schleifenlogik geschrieben werden kann mit `loop`, Schlüsselwörter wie `for` & `while` sind ebenfalls verfügbar und können helfen, einfacheren Code zu erstellen, der das gleiche Ergebnis erzielt.
```
# Führt den Block aus, außer die While-Bedingung trifft nicht mehr zu (false).
var loop_count = 1
while loop_count <= 5
    robo_left()
    loop_count = loop_count + 1
```

```
# Führt den Block aus mit loop_count 1, 2, 3, 4 & 5
for loop_count in 1,2,3,4,5
    robo_left()
```


#!unlock type{primer} id{fun}
# Functions

The `robo_left()`, `robo_scan()`, etc commands are functions. A function is a block of code that can be run later. They are defined with the `fun` keyword.

```
# define a function
fun go_right()
    robo_left()
    robo_left()

go_right()  # call it
go_right()
```


#!unlock type{primer} id{fun-b}
Functions are useful for reducing repeated code and putting a name to a more complex operation.

Functions can also call other functions. For example you could keep a count of `robo_left()` calls by wrapping it in another function and using that.

```
var left_count
fun left_and_count()
    robo_left()
    left_count += 1  # increment the count

while left_count < 3
    left_and_count()
```


#!unlock type{primer} id{fun-2}
# Functions II

Functions can also take in numbers and/or output a number.

```
fun loneliest_number()
    1  # last expression is returned

# functions can take arguments
fun largest(a, b)
    if b > a
        # can return early
        return b
    a

var three = largest(2, 3)
var one = largest(-5, loneliest_number())
```


#!unlock type{primer} id{bool}
# Boolean operators

The `and` & `or` operators can be used to combine zero & non-zero values. They can be used to produce more complex logical statements.

An '`and`' expression returns `1` if both sides are non-zero.

```
var scan = robo_scan()
var adjacent = robo_detect_adjacent()
if scan < 0 and adjacent is 3
    robo_forward()
```
An '`or`' expression returns `1` if either side is non-zero.
```
var scan = robo_scan()
var safe = scan is 1 or scan is 2
if safe
    robo_forward()
```


#!unlock type{primer} id{seq}
# Sequences

`seq` is used to define a sequence of values. The values within can be accessed and modified by their index, starting with `0`.

```
seq list[]  # new empty seq
seq numbers[] = 11, 22, 33

var first = numbers[0]
var third = numbers[2]
numbers[1] = 77  # overwrite index 1 to 77 (was 22)
if numbers[1] > 40
    robo_left()
```

#!unlock type{primer} id{seq-b}
The `add(sv)` function is used to add additional values to the end of the sequence. `remove(sv)` to remove a value by index. `size(s)` returns the number of values in the sequence.

```
seq list[]

var size = list[].size()
list[].add(11)  # add to end
list[].add(33)

var el = list[0]
var size = list[].size()

list[].remove(0)  # remove index 0
var el = list[0]
var size = list[].size()
```

#!unlock type{primer} id{loop-seq}
# Looping sequences

`for` can be used to loop over each value inside a sequence.

```
seq nums[] = 1, 234, 55, -23

for number in nums[]
    if number < 100
        robo_use()
    else
        robo_left()
```


#!unlock type{primer} id{fun-3}
# Functions III

Functions can have `seq` arguments.

```
# function with a single seq argument
fun sum(list[])
    var sum
    for n in list[]
        sum += n
    sum

seq nums[] = 1, 2, 3
var total = sum(nums[])

total is 6
```


#!unlock type{primer} id{dot-call}
There is another way to call functions with arguments.

```no_run
fun example(a, b, c, d)
    # ...

example(2, 3, 4, 5)  # normal call syntax

2.example(3, 4, 5)  # dot call syntax
```
The second style may suit certain usages, for example the built-in `add`, `remove` & `size` functions.
```no_run
nums[].size() # 3 equivalent to size(nums[])

nums[].sum()  # 6
```
